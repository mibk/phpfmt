// Code generated by "stringer -type Type -linecomment"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Illegal-0]
	_ = x[EOF-1]
	_ = x[Whitespace-2]
	_ = x[Comment-3]
	_ = x[DocComment-4]
	_ = x[Ident-5]
	_ = x[Int-6]
	_ = x[Float-7]
	_ = x[String-8]
	_ = x[Var-9]
	_ = x[InlineHTML-10]
	_ = x[symbolStart-11]
	_ = x[OpenTag-12]
	_ = x[CloseTag-13]
	_ = x[Dollar-14]
	_ = x[Backslash-15]
	_ = x[Qmark-16]
	_ = x[Lparen-17]
	_ = x[Rparen-18]
	_ = x[Lbrack-19]
	_ = x[Rbrack-20]
	_ = x[Lbrace-21]
	_ = x[Rbrace-22]
	_ = x[At-23]
	_ = x[BitNot-24]
	_ = x[Add-25]
	_ = x[Sub-26]
	_ = x[Mul-27]
	_ = x[Quo-28]
	_ = x[Rem-29]
	_ = x[Pow-30]
	_ = x[BitAnd-31]
	_ = x[BitOr-32]
	_ = x[BitXor-33]
	_ = x[BitShl-34]
	_ = x[BitShr-35]
	_ = x[Concat-36]
	_ = x[Coalesce-37]
	_ = x[AddAssign-38]
	_ = x[SubAssign-39]
	_ = x[MulAssign-40]
	_ = x[QuoAssign-41]
	_ = x[RemAssign-42]
	_ = x[PowAssign-43]
	_ = x[AndAssign-44]
	_ = x[OrAssign-45]
	_ = x[XorAssign-46]
	_ = x[ShlAssign-47]
	_ = x[ShrAssign-48]
	_ = x[ConcatAssign-49]
	_ = x[CoalesceAssign-50]
	_ = x[And-51]
	_ = x[Or-52]
	_ = x[Inc-53]
	_ = x[Dec-54]
	_ = x[Assign-55]
	_ = x[Not-56]
	_ = x[Lt-57]
	_ = x[Gt-58]
	_ = x[Leq-59]
	_ = x[Geq-60]
	_ = x[Eq-61]
	_ = x[Neq-62]
	_ = x[Identical-63]
	_ = x[NotIdentical-64]
	_ = x[Comma-65]
	_ = x[Colon-66]
	_ = x[DoubleColon-67]
	_ = x[Semicolon-68]
	_ = x[Ellipsis-69]
	_ = x[Arrow-70]
	_ = x[QmarkArrow-71]
	_ = x[DoubleArrow-72]
	_ = x[Spaceship-73]
	_ = x[symbolEnd-74]
	_ = x[keywordStart-75]
	_ = x[Abstract-76]
	_ = x[As-77]
	_ = x[Break-78]
	_ = x[Case-79]
	_ = x[Catch-80]
	_ = x[Class-81]
	_ = x[Clone-82]
	_ = x[Const-83]
	_ = x[Continue-84]
	_ = x[Declare-85]
	_ = x[Default-86]
	_ = x[Do-87]
	_ = x[Echo-88]
	_ = x[Else-89]
	_ = x[Enum-90]
	_ = x[Extends-91]
	_ = x[Final-92]
	_ = x[Finally-93]
	_ = x[Fn-94]
	_ = x[For-95]
	_ = x[Foreach-96]
	_ = x[From-97]
	_ = x[Function-98]
	_ = x[Global-99]
	_ = x[Goto-100]
	_ = x[If-101]
	_ = x[Implements-102]
	_ = x[Instanceof-103]
	_ = x[Insteadof-104]
	_ = x[Interface-105]
	_ = x[Match-106]
	_ = x[Namespace-107]
	_ = x[New-108]
	_ = x[Print-109]
	_ = x[Private-110]
	_ = x[Protected-111]
	_ = x[Public-112]
	_ = x[Readonly-113]
	_ = x[Return-114]
	_ = x[Static-115]
	_ = x[Switch-116]
	_ = x[Throw-117]
	_ = x[Trait-118]
	_ = x[Try-119]
	_ = x[Use-120]
	_ = x[While-121]
	_ = x[Yield-122]
	_ = x[LowPrecAnd-123]
	_ = x[LowPrecOr-124]
	_ = x[LowPrecXor-125]
	_ = x[keywordEnd-126]
}

const _Type_name = "IllegalEOFWhitespaceCommentDocCommentIdentIntFloatStringVarInlineHTMLsymbolStart<?php?>$\\?()[]{}@~+-*/%**&|^<<>>.??+=-=*=/=%=**=&=|=^=<<=>>=.=??=&&||++--=!<><=>===!====!==,:::;...->?->=><=>symbolEndkeywordStartabstractasbreakcasecatchclasscloneconstcontinuedeclaredefaultdoechoelseenumextendsfinalfinallyfnforforeachfromfunctionglobalgotoifimplementsinstanceofinsteadofinterfacematchnamespacenewprintprivateprotectedpublicreadonlyreturnstaticswitchthrowtraittryusewhileyieldandorxorkeywordEnd"

var _Type_index = [...]uint16{0, 7, 10, 20, 27, 37, 42, 45, 50, 56, 59, 69, 80, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 112, 113, 115, 117, 119, 121, 123, 125, 128, 130, 132, 134, 137, 140, 142, 145, 147, 149, 151, 153, 154, 155, 156, 157, 159, 161, 163, 165, 168, 171, 172, 173, 175, 176, 179, 181, 184, 186, 189, 198, 210, 218, 220, 225, 229, 234, 239, 244, 249, 257, 264, 271, 273, 277, 281, 285, 292, 297, 304, 306, 309, 316, 320, 328, 334, 338, 340, 350, 360, 369, 378, 383, 392, 395, 400, 407, 416, 422, 430, 436, 442, 448, 453, 458, 461, 464, 469, 474, 477, 479, 482, 492}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
