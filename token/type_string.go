// Code generated by "stringer -type Type -linecomment"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Illegal-0]
	_ = x[EOF-1]
	_ = x[Whitespace-2]
	_ = x[Comment-3]
	_ = x[DocComment-4]
	_ = x[Ident-5]
	_ = x[Int-6]
	_ = x[Float-7]
	_ = x[String-8]
	_ = x[Var-9]
	_ = x[InlineHTML-10]
	_ = x[symbolStart-11]
	_ = x[OpenTag-12]
	_ = x[CloseTag-13]
	_ = x[Dollar-14]
	_ = x[Backslash-15]
	_ = x[Qmark-16]
	_ = x[Lparen-17]
	_ = x[Rparen-18]
	_ = x[Lbrack-19]
	_ = x[Rbrack-20]
	_ = x[Lbrace-21]
	_ = x[Rbrace-22]
	_ = x[At-23]
	_ = x[Hash-24]
	_ = x[BitNot-25]
	_ = x[Add-26]
	_ = x[Sub-27]
	_ = x[Mul-28]
	_ = x[Quo-29]
	_ = x[Rem-30]
	_ = x[Pow-31]
	_ = x[BitAnd-32]
	_ = x[BitOr-33]
	_ = x[BitXor-34]
	_ = x[BitShl-35]
	_ = x[BitShr-36]
	_ = x[Concat-37]
	_ = x[Coalesce-38]
	_ = x[AddAssign-39]
	_ = x[SubAssign-40]
	_ = x[MulAssign-41]
	_ = x[QuoAssign-42]
	_ = x[RemAssign-43]
	_ = x[PowAssign-44]
	_ = x[AndAssign-45]
	_ = x[OrAssign-46]
	_ = x[XorAssign-47]
	_ = x[ShlAssign-48]
	_ = x[ShrAssign-49]
	_ = x[ConcatAssign-50]
	_ = x[CoalesceAssign-51]
	_ = x[And-52]
	_ = x[Or-53]
	_ = x[Inc-54]
	_ = x[Dec-55]
	_ = x[Assign-56]
	_ = x[Not-57]
	_ = x[Lt-58]
	_ = x[Gt-59]
	_ = x[Leq-60]
	_ = x[Geq-61]
	_ = x[Eq-62]
	_ = x[Neq-63]
	_ = x[Identical-64]
	_ = x[NotIdentical-65]
	_ = x[Comma-66]
	_ = x[Colon-67]
	_ = x[DoubleColon-68]
	_ = x[Semicolon-69]
	_ = x[Ellipsis-70]
	_ = x[Arrow-71]
	_ = x[QmarkArrow-72]
	_ = x[DoubleArrow-73]
	_ = x[Spaceship-74]
	_ = x[symbolEnd-75]
	_ = x[keywordStart-76]
	_ = x[Abstract-77]
	_ = x[As-78]
	_ = x[Break-79]
	_ = x[Case-80]
	_ = x[Catch-81]
	_ = x[Class-82]
	_ = x[Clone-83]
	_ = x[Const-84]
	_ = x[Continue-85]
	_ = x[Declare-86]
	_ = x[Default-87]
	_ = x[Do-88]
	_ = x[Echo-89]
	_ = x[Else-90]
	_ = x[Enum-91]
	_ = x[Extends-92]
	_ = x[Final-93]
	_ = x[Finally-94]
	_ = x[Fn-95]
	_ = x[For-96]
	_ = x[Foreach-97]
	_ = x[From-98]
	_ = x[Function-99]
	_ = x[Global-100]
	_ = x[Goto-101]
	_ = x[If-102]
	_ = x[Implements-103]
	_ = x[Instanceof-104]
	_ = x[Insteadof-105]
	_ = x[Interface-106]
	_ = x[Match-107]
	_ = x[Namespace-108]
	_ = x[New-109]
	_ = x[Print-110]
	_ = x[Private-111]
	_ = x[Protected-112]
	_ = x[Public-113]
	_ = x[Readonly-114]
	_ = x[Return-115]
	_ = x[Static-116]
	_ = x[Switch-117]
	_ = x[Throw-118]
	_ = x[Trait-119]
	_ = x[Try-120]
	_ = x[Use-121]
	_ = x[While-122]
	_ = x[Yield-123]
	_ = x[LowPrecAnd-124]
	_ = x[LowPrecOr-125]
	_ = x[LowPrecXor-126]
	_ = x[keywordEnd-127]
}

const _Type_name = "IllegalEOFWhitespaceCommentDocCommentIdentIntFloatStringVarInlineHTMLsymbolStart<?php?>$\\?()[]{}@#~+-*/%**&|^<<>>.??+=-=*=/=%=**=&=|=^=<<=>>=.=??=&&||++--=!<><=>===!====!==,:::;...->?->=><=>symbolEndkeywordStartabstractasbreakcasecatchclasscloneconstcontinuedeclaredefaultdoechoelseenumextendsfinalfinallyfnforforeachfromfunctionglobalgotoifimplementsinstanceofinsteadofinterfacematchnamespacenewprintprivateprotectedpublicreadonlyreturnstaticswitchthrowtraittryusewhileyieldandorxorkeywordEnd"

var _Type_index = [...]uint16{0, 7, 10, 20, 27, 37, 42, 45, 50, 56, 59, 69, 80, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 114, 116, 118, 120, 122, 124, 126, 129, 131, 133, 135, 138, 141, 143, 146, 148, 150, 152, 154, 155, 156, 157, 158, 160, 162, 164, 166, 169, 172, 173, 174, 176, 177, 180, 182, 185, 187, 190, 199, 211, 219, 221, 226, 230, 235, 240, 245, 250, 258, 265, 272, 274, 278, 282, 286, 293, 298, 305, 307, 310, 317, 321, 329, 335, 339, 341, 351, 361, 370, 379, 384, 393, 396, 401, 408, 417, 423, 431, 437, 443, 449, 454, 459, 462, 465, 470, 475, 478, 480, 483, 493}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
